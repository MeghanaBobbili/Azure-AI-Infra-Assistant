"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/queryParser.js":
/*!**********************************!*\
  !*** ./src/utils/queryParser.js ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   INTENTS: function() { return /* binding */ INTENTS; },\n/* harmony export */   detectIntent: function() { return /* binding */ detectIntent; },\n/* harmony export */   processWithOpenAI: function() { return /* binding */ processWithOpenAI; },\n/* harmony export */   refinePrompt: function() { return /* binding */ refinePrompt; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n// Intent definitions\nconst INTENTS = {\n    COST: {\n        VM: \"cost_vm\",\n        STORAGE: \"cost_storage\",\n        GENERAL: \"cost_general\"\n    },\n    PERFORMANCE: {\n        VM: \"performance_vm\",\n        GENERAL: \"performance_general\"\n    },\n    RESOURCES: {\n        LIST: \"resources_list\",\n        DETAILS: \"resources_details\"\n    },\n    UNKNOWN: \"unknown\"\n};\n// Keywords mapping to intents\nconst KEYWORDS = {\n    cost: {\n        general: [\n            \"cost\",\n            \"spend\",\n            \"bill\",\n            \"charge\",\n            \"expense\",\n            \"pricing\"\n        ],\n        vm: [\n            \"vm cost\",\n            \"virtual machine cost\",\n            \"compute cost\"\n        ],\n        storage: [\n            \"storage cost\",\n            \"disk cost\"\n        ]\n    },\n    performance: {\n        general: [\n            \"performance\",\n            \"metrics\",\n            \"monitoring\",\n            \"health\"\n        ],\n        vm: [\n            \"vm performance\",\n            \"cpu usage\",\n            \"memory usage\"\n        ]\n    },\n    resources: {\n        list: [\n            \"list\",\n            \"show\",\n            \"get\",\n            \"what\",\n            \"resources\"\n        ],\n        details: [\n            \"details\",\n            \"information\",\n            \"about\"\n        ]\n    }\n};\n// Match keywords in query\nfunction matchKeywords(query, keywordList) {\n    return keywordList.some((keyword)=>query.toLowerCase().includes(keyword.toLowerCase()));\n}\n// Detect intent from query\nfunction detectIntent(query) {\n    // Cost intents\n    if (matchKeywords(query, KEYWORDS.cost.vm)) {\n        return INTENTS.COST.VM;\n    }\n    if (matchKeywords(query, KEYWORDS.cost.storage)) {\n        return INTENTS.COST.STORAGE;\n    }\n    if (matchKeywords(query, KEYWORDS.cost.general)) {\n        return INTENTS.COST.GENERAL;\n    }\n    // Performance intents\n    if (matchKeywords(query, KEYWORDS.performance.vm)) {\n        return INTENTS.PERFORMANCE.VM;\n    }\n    if (matchKeywords(query, KEYWORDS.performance.general)) {\n        return INTENTS.PERFORMANCE.GENERAL;\n    }\n    // Resource intents\n    if (matchKeywords(query, KEYWORDS.resources.list)) {\n        return INTENTS.RESOURCES.LIST;\n    }\n    if (matchKeywords(query, KEYWORDS.resources.details)) {\n        return INTENTS.RESOURCES.DETAILS;\n    }\n    return INTENTS.UNKNOWN;\n}\n// Refine prompt based on intent\nfunction refinePrompt(query, intent) {\n    switch(intent){\n        case INTENTS.COST.VM:\n            return \"You are an Azure cost analyst. Help analyze VM costs and suggest optimizations.\";\n        case INTENTS.COST.STORAGE:\n            return \"You are an Azure cost analyst. Help analyze storage costs and suggest optimizations.\";\n        case INTENTS.COST.GENERAL:\n            return \"You are an Azure cost analyst. Help analyze overall costs and suggest optimizations.\";\n        case INTENTS.PERFORMANCE.VM:\n            return \"You are an Azure performance expert. Help analyze VM metrics and suggest improvements.\";\n        case INTENTS.PERFORMANCE.GENERAL:\n            return \"You are an Azure performance expert. Help analyze system metrics and suggest improvements.\";\n        case INTENTS.RESOURCES.LIST:\n            return \"You are an Azure resource manager. Help list and organize Azure resources.\";\n        case INTENTS.RESOURCES.DETAILS:\n            return \"You are an Azure resource expert. Help provide detailed information about Azure resources.\";\n        default:\n            return \"You are an Azure infrastructure assistant. Help the user with their Azure-related query.\";\n    }\n}\n// Process query through OpenAI\nasync function processWithOpenAI(query, messages) {\n    let azureData = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n    const systemMessage = {\n        role: \"system\",\n        content: \"You are an Azure infrastructure assistant. Help with Azure-related queries.\"\n    };\n    const contextMessage = azureData ? {\n        role: \"system\",\n        content: \"Current Azure data: \".concat(JSON.stringify(azureData))\n    } : null;\n    const response = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(process.env.AZURE_OPENAI_ENDPOINT, {\n        messages: [\n            systemMessage,\n            ...contextMessage ? [\n                contextMessage\n            ] : [],\n            ...messages,\n            {\n                role: \"user\",\n                content: query\n            }\n        ],\n        temperature: 0.7,\n        max_tokens: 1000\n    }, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"api-key\": process.env.AZURE_OPENAI_API_KEY\n        }\n    });\n    return response.data.choices[0].message.content;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/queryParser.js\n"));

/***/ })

});