"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/query";
exports.ids = ["pages/api/query"];
exports.modules = {

/***/ "@azure/arm-appservice":
/*!****************************************!*\
  !*** external "@azure/arm-appservice" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-appservice");

/***/ }),

/***/ "@azure/arm-compute":
/*!*************************************!*\
  !*** external "@azure/arm-compute" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-compute");

/***/ }),

/***/ "@azure/arm-costmanagement":
/*!********************************************!*\
  !*** external "@azure/arm-costmanagement" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-costmanagement");

/***/ }),

/***/ "@azure/arm-monitor":
/*!*************************************!*\
  !*** external "@azure/arm-monitor" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-monitor");

/***/ }),

/***/ "@azure/arm-resources":
/*!***************************************!*\
  !*** external "@azure/arm-resources" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-resources");

/***/ }),

/***/ "@azure/monitor-query":
/*!***************************************!*\
  !*** external "@azure/monitor-query" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@azure/monitor-query");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "@azure/identity":
/*!**********************************!*\
  !*** external "@azure/identity" ***!
  \**********************************/
/***/ ((module) => {

module.exports = import("@azure/identity");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\query.js */ \"(api)/./pages/api/query.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/query\",\n        pathname: \"/api/query\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnF1ZXJ5JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNxdWVyeS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNtRDtBQUNuRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLWFpLWluZnJhLWFzc2lzdGFudC8/YzEzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHF1ZXJ5LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcXVlcnlcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9xdWVyeVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/query.js":
/*!****************************!*\
  !*** ./pages/api/query.js ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _azure_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/identity */ \"@azure/identity\");\n/* harmony import */ var _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/monitor-query */ \"@azure/monitor-query\");\n/* harmony import */ var _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _azure_arm_compute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/arm-compute */ \"@azure/arm-compute\");\n/* harmony import */ var _azure_arm_compute__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_compute__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/arm-costmanagement */ \"@azure/arm-costmanagement\");\n/* harmony import */ var _azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/arm-monitor */ \"@azure/arm-monitor\");\n/* harmony import */ var _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/arm-resources */ \"@azure/arm-resources\");\n/* harmony import */ var _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/arm-appservice */ \"@azure/arm-appservice\");\n/* harmony import */ var _azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_azure_identity__WEBPACK_IMPORTED_MODULE_0__]);\n_azure_identity__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\n\nconst mockAIResponse = (query)=>{\n    const q = query.toLowerCase();\n    if (q.includes(\"cpu usage\")) {\n        return \"The CPU usage of your production VM is currently at 75%\";\n    }\n    if (q.includes(\"alerts\")) {\n        return \"Here are the last 5 critical alerts:\\n- High Memory Usage (VM-PROD1)\\n- Failed Backup (DB-02)\\n- Network Timeout (APP-SVC-3)\\n- SSL Certificate Expiring (WAF-01)\\n- Disk Space Critical (STORAGE-05)\";\n    }\n    if (q.includes(\"cost\")) {\n        return \"Your current month's Azure spending is $12,450, which is 15% higher than last month\";\n    }\n    return \"I understand you're asking about Azure infrastructure. Could you be more specific about what you'd like to know?\";\n};\nconst extractQuery = (query)=>{\n    const q = query.toLowerCase();\n    if (q.includes(\"cost\") || q.includes(\"spending\") || q.includes(\"budget\")) {\n        return {\n            type: \"cost\",\n            action: \"overview\"\n        };\n    }\n    if (q.includes(\"performance\") || q.includes(\"cpu\") || q.includes(\"memory\")) {\n        return {\n            type: \"monitor\",\n            action: \"performance\"\n        };\n    }\n    if (q.includes(\"errors\") || q.includes(\"failures\") || q.includes(\"failed\")) {\n        return {\n            type: \"monitor\",\n            action: \"errors\"\n        };\n    }\n    if (q.includes(\"alert\") || q.includes(\"warning\")) {\n        return {\n            type: \"monitor\",\n            action: \"alerts\"\n        };\n    }\n    const restartMatch = q.match(/restart\\s+(?:vm\\s+)?([^\\s]+)\\s+(?:in|from)\\s+(?:resource group\\s+)?([^\\s]+)/i);\n    if (restartMatch) {\n        return {\n            type: \"vm\",\n            action: \"restart\",\n            vmName: restartMatch[1],\n            resourceGroup: restartMatch[2]\n        };\n    }\n    // App Service scaling\n    const scaleMatch = q.match(/scale\\s+(?:app|service)\\s+([^\\s]+)\\s+(?:to|by)\\s+(\\d+)/i);\n    if (scaleMatch) {\n        return {\n            type: \"appservice\",\n            action: \"scale\",\n            appName: scaleMatch[1],\n            instances: parseInt(scaleMatch[2])\n        };\n    }\n    // Resource listing\n    if (q.includes(\"list\") && q.includes(\"resources\")) {\n        return {\n            type: \"resource\",\n            action: \"list\"\n        };\n    }\n    return null;\n};\nconst getCostOptimizations = (costData)=>{\n    const suggestions = [];\n    const totalCost = costData.reduce((sum, d)=>sum + parseFloat(d.cost), 0);\n    // Find expensive resource groups (>20% of total)\n    costData.forEach((d)=>{\n        const percentage = parseFloat(d.cost) / totalCost * 100;\n        if (percentage > 20) {\n            suggestions.push(`⚠️ Resource group \"${d.resourceGroup}\" accounts for ${percentage.toFixed(1)}% of total costs. Consider:\r\n• Reviewing unused resources\r\n• Implementing auto-shutdown for dev/test VMs\r\n• Using reserved instances for predictable workloads`);\n        }\n    });\n    // General suggestions if costs are high\n    if (totalCost > 10000) {\n        suggestions.push(`💡 General cost optimization tips:\r\n• Enable Azure Advisor for cost recommendations\r\n• Review and delete unused resources\r\n• Consider moving to PaaS services where possible\r\n• Implement resource tagging for better cost tracking`);\n    }\n    return suggestions.length ? \"\\n\\nOptimization Suggestions:\\n\" + suggestions.join(\"\\n\\n\") : \"\";\n};\nconst getMonitoringData = async (client, action)=>{\n    const timespan = {\n        duration: \"P1D\"\n    };\n    if (action === \"performance\") {\n        const result = await client.queryWorkspace(process.env.AZURE_WORKSPACE_ID, `Perf\r\n      | where TimeGenerated > ago(1h)\r\n      | where ObjectName == \"Processor\" or ObjectName == \"Memory\"\r\n      | summarize avg(CounterValue) by ObjectName, CounterName\r\n      | order by ObjectName asc`, timespan);\n        if (!result.tables?.[0]?.rows?.length) {\n            return \"No performance data available for the last hour.\";\n        }\n        return `📊 Last hour's performance metrics:\\n${result.tables[0].rows.map((row)=>`• ${row[0]} ${row[1]}: ${Math.round(row[2])}%`).join(\"\\n\")}`;\n    }\n    if (action === \"errors\") {\n        const result = await client.queryWorkspace(process.env.AZURE_WORKSPACE_ID, `AzureActivity \r\n      | where TimeGenerated > ago(24h)\r\n      | where Level == \"Error\" or Status contains \"Failed\"\r\n      | project TimeGenerated, ResourceGroup, OperationName, Status\r\n      | top 5 by TimeGenerated desc`, timespan);\n        if (!result.tables?.[0]?.rows?.length) {\n            return \"✅ No errors found in the last 24 hours!\";\n        }\n        return `⚠️ Recent errors:\\n${result.tables[0].rows.map((row)=>`• ${new Date(row[0]).toLocaleString()}: ${row[2]} in ${row[1]} (${row[3]})`).join(\"\\n\")}`;\n    }\n};\nconst getAlertData = async (client)=>{\n    const alerts = await client.activityLogAlerts.listBySubscriptionId();\n    const activeAlerts = [];\n    for await (const alert of alerts){\n        if (alert.enabled) {\n            activeAlerts.push({\n                name: alert.name,\n                description: alert.description,\n                condition: alert.condition?.allOf?.[0]?.equals || \"Custom condition\",\n                severity: alert.severity || \"Unknown\",\n                status: alert.status || \"Active\"\n            });\n        }\n    }\n    if (!activeAlerts.length) {\n        return \"✅ No active alerts configured.\";\n    }\n    return `🚨 Active Alert Rules:\\n${activeAlerts.map((alert)=>`• ${alert.name} (${alert.severity})\\n  ${alert.description || \"No description\"}`).join(\"\\n\\n\")}`;\n};\nconst handleResourceAction = async (action)=>{\n    const credential = new _azure_identity__WEBPACK_IMPORTED_MODULE_0__.DefaultAzureCredential();\n    const client = new _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__.ResourceManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n    const resources = await client.resources.list();\n    const groupedResources = {};\n    for await (const resource of resources){\n        const type = resource.type.split(\"/\").pop();\n        if (!groupedResources[type]) {\n            groupedResources[type] = [];\n        }\n        groupedResources[type].push(resource.name);\n    }\n    return `📊 Azure Resources:\\n${Object.entries(groupedResources).map(([type, names])=>`\\n${type} (${names.length}):\\n${names.map((name)=>`• ${name}`).join(\"\\n\")}`).join(\"\\n\")}`;\n};\nconst handleAppServiceAction = async (action)=>{\n    const credential = new _azure_identity__WEBPACK_IMPORTED_MODULE_0__.DefaultAzureCredential();\n    const client = new _azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6__.WebSiteManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n    if (action.action === \"scale\") {\n        const sites = await client.webApps.list();\n        const app = Array.from(sites).find((s)=>s.name.toLowerCase() === action.appName.toLowerCase());\n        if (!app) {\n            return `❌ App \"${action.appName}\" not found`;\n        }\n        await client.webApps.updateConfiguration(app.resourceGroup, app.name, {\n            numberOfWorkers: action.instances\n        });\n        return `✅ Scaled ${action.appName} to ${action.instances} instances`;\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            reply: \"Method not allowed\"\n        });\n    }\n    const { query } = req.body;\n    if (!query?.trim()) {\n        return res.status(400).json({\n            reply: \"Query is required\"\n        });\n    }\n    try {\n        const credential = new _azure_identity__WEBPACK_IMPORTED_MODULE_0__.DefaultAzureCredential();\n        const action = extractQuery(query);\n        if (action) {\n            switch(action.type){\n                case \"resource\":\n                    return res.status(200).json({\n                        reply: await handleResourceAction(action)\n                    });\n                case \"appservice\":\n                    return res.status(200).json({\n                        reply: await handleAppServiceAction(action)\n                    });\n                case \"monitor\":\n                    {\n                        const logsClient = new _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__.LogsQueryClient(credential);\n                        if (action.action === \"alerts\") {\n                            const monitorClient = new _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__.MonitorClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n                            const alertData = await getAlertData(monitorClient);\n                            return res.status(200).json({\n                                reply: alertData\n                            });\n                        }\n                        const monitorData = await getMonitoringData(logsClient, action.action);\n                        return res.status(200).json({\n                            reply: monitorData\n                        });\n                    }\n                case \"cost\":\n                    {\n                        const costClient = new _azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3__.CostManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n                        const today = new Date();\n                        const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);\n                        const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n                        const costQuery = {\n                            type: \"ActualCost\",\n                            timeframe: \"Custom\",\n                            timePeriod: {\n                                from: firstDay.toISOString(),\n                                to: lastDay.toISOString()\n                            },\n                            dataset: {\n                                granularity: \"Monthly\",\n                                aggregation: {\n                                    totalCost: {\n                                        name: \"Cost\",\n                                        function: \"Sum\"\n                                    }\n                                },\n                                grouping: [\n                                    {\n                                        type: \"Dimension\",\n                                        name: \"ResourceGroup\"\n                                    }\n                                ]\n                            }\n                        };\n                        const scope = `/subscriptions/${process.env.AZURE_SUBSCRIPTION_ID}`;\n                        const result = await costClient.query.usage(scope, costQuery);\n                        const costData = result.rows.map((row)=>({\n                                resourceGroup: row[1],\n                                cost: row[0].toFixed(2)\n                            }));\n                        const total = costData.reduce((sum, d)=>sum + parseFloat(d.cost), 0);\n                        const optimizations = getCostOptimizations(costData);\n                        return res.status(200).json({\n                            reply: `💰 Current month's costs:\\n${costData.map((d)=>`• ${d.resourceGroup}: $${d.cost}`).join(\"\\n\")}\\n\\n📊 Total: $${total.toFixed(2)}${optimizations}`\n                        });\n                    }\n                case \"vm\":\n                    {\n                        const computeClient = new _azure_arm_compute__WEBPACK_IMPORTED_MODULE_2__.ComputeManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n                        await computeClient.virtualMachines.beginRestartAndWait(action.resourceGroup, action.vmName);\n                        return res.status(200).json({\n                            reply: `✅ Successfully restarted VM ${action.vmName} in ${action.resourceGroup}`\n                        });\n                    }\n            }\n        }\n        // Default query for failed activities\n        const logsClient = new _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__.LogsQueryClient(credential);\n        const result = await logsClient.queryWorkspace(process.env.AZURE_WORKSPACE_ID, `AzureActivity \r\n      | where ActivityStatus == 'Failed' \r\n      | project TimeGenerated, ResourceGroup, ResourceProviderValue, OperationName, Properties\r\n      | top 5 by TimeGenerated desc`, {\n            duration: \"P1D\"\n        });\n        if (result.tables?.[0]?.rows?.length > 0) {\n            const formattedResults = result.tables[0].rows.map((row)=>({\n                    time: new Date(row[0]).toLocaleString(),\n                    resourceGroup: row[1],\n                    provider: row[2],\n                    operation: row[3],\n                    details: row[4]\n                }));\n            res.status(200).json({\n                reply: \"Recent failed activities:\\n\" + formattedResults.map((r)=>`• ${r.time}: ${r.operation} in ${r.resourceGroup}`).join(\"\\n\")\n            });\n        } else {\n            res.status(200).json({\n                reply: \"Good news! No failed activities found in the last 24 hours.\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Azure Error:\", error);\n        res.status(500).json({\n            reply: \"Sorry, I encountered an error while processing your request. Please try again.\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/query.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();