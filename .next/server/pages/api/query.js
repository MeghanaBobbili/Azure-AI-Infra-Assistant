"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/query";
exports.ids = ["pages/api/query"];
exports.modules = {

/***/ "@azure/arm-appservice":
/*!****************************************!*\
  !*** external "@azure/arm-appservice" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-appservice");

/***/ }),

/***/ "@azure/arm-compute":
/*!*************************************!*\
  !*** external "@azure/arm-compute" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-compute");

/***/ }),

/***/ "@azure/arm-costmanagement":
/*!********************************************!*\
  !*** external "@azure/arm-costmanagement" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-costmanagement");

/***/ }),

/***/ "@azure/arm-monitor":
/*!*************************************!*\
  !*** external "@azure/arm-monitor" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-monitor");

/***/ }),

/***/ "@azure/arm-resourcehealth":
/*!********************************************!*\
  !*** external "@azure/arm-resourcehealth" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-resourcehealth");

/***/ }),

/***/ "@azure/arm-resources":
/*!***************************************!*\
  !*** external "@azure/arm-resources" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-resources");

/***/ }),

/***/ "@azure/arm-security":
/*!**************************************!*\
  !*** external "@azure/arm-security" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("@azure/arm-security");

/***/ }),

/***/ "@azure/monitor-query":
/*!***************************************!*\
  !*** external "@azure/monitor-query" ***!
  \***************************************/
/***/ ((module) => {

module.exports = require("@azure/monitor-query");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "@azure/identity":
/*!**********************************!*\
  !*** external "@azure/identity" ***!
  \**********************************/
/***/ ((module) => {

module.exports = import("@azure/identity");;

/***/ }),

/***/ "@azure/openai":
/*!********************************!*\
  !*** external "@azure/openai" ***!
  \********************************/
/***/ ((module) => {

module.exports = import("@azure/openai");;

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "chart.js/auto":
/*!********************************!*\
  !*** external "chart.js/auto" ***!
  \********************************/
/***/ ((module) => {

module.exports = import("chart.js/auto");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\query.js */ \"(api)/./pages/api/query.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/query\",\n        pathname: \"/api/query\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_query_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnF1ZXJ5JnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNxdWVyeS5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNtRDtBQUNuRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLWFpLWluZnJhLWFzc2lzdGFudC8/YzEzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHF1ZXJ5LmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcXVlcnlcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9xdWVyeVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/query.js":
/*!****************************!*\
  !*** ./pages/api/query.js ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _azure_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/identity */ \"@azure/identity\");\n/* harmony import */ var _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/monitor-query */ \"@azure/monitor-query\");\n/* harmony import */ var _azure_monitor_query__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_azure_monitor_query__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _azure_arm_compute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/arm-compute */ \"@azure/arm-compute\");\n/* harmony import */ var _azure_arm_compute__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_compute__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/arm-costmanagement */ \"@azure/arm-costmanagement\");\n/* harmony import */ var _azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_costmanagement__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/arm-monitor */ \"@azure/arm-monitor\");\n/* harmony import */ var _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @azure/arm-resources */ \"@azure/arm-resources\");\n/* harmony import */ var _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @azure/arm-appservice */ \"@azure/arm-appservice\");\n/* harmony import */ var _azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_appservice__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! axios */ \"axios\");\n/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! chart.js/auto */ \"chart.js/auto\");\n/* harmony import */ var _azure_arm_resourcehealth__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @azure/arm-resourcehealth */ \"@azure/arm-resourcehealth\");\n/* harmony import */ var _azure_arm_resourcehealth__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_resourcehealth__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _azure_arm_security__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @azure/arm-security */ \"@azure/arm-security\");\n/* harmony import */ var _azure_arm_security__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(_azure_arm_security__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _azure_openai__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @azure/openai */ \"@azure/openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_azure_identity__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_7__, chart_js_auto__WEBPACK_IMPORTED_MODULE_8__, _azure_openai__WEBPACK_IMPORTED_MODULE_11__]);\n([_azure_identity__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_7__, chart_js_auto__WEBPACK_IMPORTED_MODULE_8__, _azure_openai__WEBPACK_IMPORTED_MODULE_11__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n\n\n\n\n// Initialize the OpenAI Client\nconst endpoint = process.env.AZURE_OPENAI_ENDPOINT;\nconst apiKey = process.env.AZURE_OPENAI_API_KEY;\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const { messages } = req.body;\n        const userMessage = messages[messages.length - 1].content.toLowerCase();\n        // Initialize Azure clients\n        const credential = new _azure_identity__WEBPACK_IMPORTED_MODULE_0__.DefaultAzureCredential();\n        const monitorClient = new _azure_arm_monitor__WEBPACK_IMPORTED_MODULE_4__.MonitorClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n        const resourceClient = new _azure_arm_resources__WEBPACK_IMPORTED_MODULE_5__.ResourceManagementClient(credential, process.env.AZURE_SUBSCRIPTION_ID);\n        // Check if the query is about resource metrics\n        if (userMessage.includes(\"cpu\") || userMessage.includes(\"memory\") || userMessage.includes(\"performance\")) {\n            // Get all resources\n            const resources = [];\n            for await (const resource of resourceClient.resources.list()){\n                resources.push(resource);\n            }\n            // Get metrics for the last 24 hours\n            const now1 = new Date();\n            const startTime1 = new Date(now1.getTime() - 24 * 60 * 60 * 1000);\n            const metricsData = [];\n            for (const resource of resources){\n                try {\n                    const metrics = await monitorClient.metrics.list(resource.id, {\n                        timespan: `${startTime1.toISOString()}/${now1.toISOString()}`,\n                        interval: \"PT1H\",\n                        metricnames: \"Percentage CPU,Available Memory Bytes,Network In Total,Network Out Total\"\n                    });\n                    if (metrics.value && metrics.value.length > 0) {\n                        metricsData.push({\n                            resourceName: resource.name,\n                            resourceType: resource.type,\n                            metrics: metrics.value.map((metric)=>({\n                                    name: metric.name.value,\n                                    data: metric.timeseries[0]?.data.map((point)=>({\n                                            timestamp: point.timeStamp,\n                                            value: point.average || 0\n                                        })) || []\n                                }))\n                        });\n                    }\n                } catch (error) {\n                    console.warn(`Could not fetch metrics for ${resource.name}:`, error.message);\n                }\n            }\n            // Format the metrics data for response\n            let metricsResponse = \"Here are the current resource metrics:\\n\\n\";\n            metricsData.forEach((resource)=>{\n                metricsResponse += `📊 ${resource.resourceName} (${resource.resourceType}):\\n`;\n                resource.metrics.forEach((metric)=>{\n                    const latestValue = metric.data[metric.data.length - 1]?.value || 0;\n                    if (metric.name === \"Percentage CPU\") {\n                        metricsResponse += `- CPU Usage: ${latestValue.toFixed(2)}%\\n`;\n                    } else if (metric.name === \"Available Memory Bytes\") {\n                        metricsResponse += `- Available Memory: ${(latestValue / 1024 / 1024 / 1024).toFixed(2)} GB\\n`;\n                    } else if (metric.name.includes(\"Network\")) {\n                        metricsResponse += `- ${metric.name}: ${(latestValue / 1024 / 1024).toFixed(2)} MB/s\\n`;\n                    }\n                });\n                metricsResponse += \"\\n\";\n            });\n            // Add performance recommendations\n            metricsResponse += \"\\nRecommendations:\\n\";\n            metricsData.forEach((resource)=>{\n                const cpuMetric = resource.metrics.find((m)=>m.name === \"Percentage CPU\");\n                if (cpuMetric) {\n                    const avgCpu = cpuMetric.data.reduce((sum, point)=>sum + point.value, 0) / cpuMetric.data.length;\n                    if (avgCpu > 80) {\n                        metricsResponse += `⚠️ ${resource.resourceName} is experiencing high CPU usage. Consider scaling up or out.\\n`;\n                    } else if (avgCpu < 20) {\n                        metricsResponse += `💡 ${resource.resourceName} is underutilized. Consider scaling down to optimize costs.\\n`;\n                    }\n                }\n            });\n            return res.status(200).json({\n                message: metricsResponse,\n                role: \"assistant\",\n                data: metricsData\n            });\n        }\n        // Check for scaling commands\n        if (userMessage.includes(\"scale down\") || userMessage.includes(\"scale up\")) {\n            const resources = [];\n            for await (const resource of resourceClient.resources.list()){\n                if (resource.type.includes(\"virtualMachines\") || resource.type.includes(\"sites\")) {\n                    resources.push(resource);\n                }\n            }\n            // Get current metrics to make scaling recommendations\n            const metricsData = await Promise.all(resources.map(async (resource)=>{\n                try {\n                    const metrics = await monitorClient.metrics.list(resource.id, {\n                        timespan: `${startTime.toISOString()}/${now.toISOString()}`,\n                        interval: \"PT1H\",\n                        metricnames: \"Percentage CPU\"\n                    });\n                    return {\n                        resource,\n                        metrics: metrics.value\n                    };\n                } catch (error) {\n                    console.warn(`Could not fetch metrics for ${resource.name}:`, error.message);\n                    return {\n                        resource,\n                        metrics: []\n                    };\n                }\n            }));\n            // Generate scaling recommendations\n            const recommendations = metricsData.map(({ resource, metrics })=>{\n                const cpuMetric = metrics.find((m)=>m.name.value === \"Percentage CPU\");\n                const avgCpu = cpuMetric?.timeseries[0]?.data.reduce((sum, point)=>sum + (point.average || 0), 0) / (cpuMetric?.timeseries[0]?.data.length || 1);\n                return {\n                    resourceId: resource.id,\n                    name: resource.name,\n                    type: resource.type,\n                    currentSize: resource.sku?.name || \"Unknown\",\n                    avgCpu: avgCpu || 0,\n                    recommendation: avgCpu < 20 ? \"scale down\" : avgCpu > 80 ? \"scale up\" : \"no change\"\n                };\n            });\n            return res.status(200).json({\n                message: `Here are the scaling recommendations based on current usage:\\n\\n${recommendations.map((r)=>`📊 ${r.name} (${r.type}):\\n` + `- Current Size: ${r.currentSize}\\n` + `- Avg CPU: ${r.avgCpu.toFixed(1)}%\\n` + `- Recommendation: ${r.recommendation}\\n`).join(\"\\n\")}`,\n                role: \"assistant\",\n                data: recommendations,\n                requiresApproval: true,\n                action: \"scale\"\n            });\n        }\n        // Enhanced system message with more Azure knowledge\n        const systemMessage = {\n            role: \"system\",\n            content: `You are an Azure Infrastructure Assistant, an expert in Azure cloud services and infrastructure management.\r\n\r\nKey Areas of Expertise:\r\n- Resource Management: Azure Resource Manager, resource groups, subscriptions, management groups\r\n- Compute: VMs, App Services, Container Instances, AKS, Functions\r\n- Networking: VNets, NSGs, Load Balancers, Application Gateway, ExpressRoute\r\n- Storage: Blob, Files, Disks, Data Lake\r\n- Security: Azure AD, Key Vault, Security Center, Sentinel\r\n- Monitoring: Monitor, Log Analytics, Application Insights\r\n- Cost Management: Budgets, Cost Analysis, Reserved Instances, Hybrid Benefits\r\n\r\nResponse Guidelines:\r\n1. For implementation questions:\r\n   - Provide Azure CLI commands or Azure PowerShell scripts\r\n   - Include ARM template snippets when relevant\r\n   - Show Portal navigation steps\r\n   - Reference Bicep examples for IaC\r\n\r\n2. For architecture questions:\r\n   - Suggest Well-Architected Framework best practices\r\n   - Consider scalability, security, and cost optimization\r\n   - Provide relevant Azure architecture patterns\r\n   - Include service limits and quotas\r\n\r\n3. For troubleshooting:\r\n   - List common diagnostic steps\r\n   - Reference relevant Azure metrics and logs\r\n   - Suggest monitoring solutions\r\n   - Include links to troubleshooting guides\r\n\r\n4. Always include:\r\n   - Azure-specific terminology\r\n   - Service naming conventions\r\n   - Region considerations\r\n   - Cost implications\r\n   - Security best practices\r\n\r\nFormat code blocks with appropriate syntax highlighting:\r\n- Azure CLI: \\`\\`\\`bash\r\n- PowerShell: \\`\\`\\`powershell\r\n- ARM/Bicep: \\`\\`\\`json or \\`\\`\\`bicep\r\n- YAML: \\`\\`\\`yaml\r\n\r\nIf unsure, ask for clarification about:\r\n- Azure environment context\r\n- Scale requirements\r\n- Compliance needs\r\n- Budget constraints`\n        };\n        // Regular chatbot response for non-metric queries\n        const response = await axios__WEBPACK_IMPORTED_MODULE_7__[\"default\"].post(process.env.AZURE_OPENAI_ENDPOINT, {\n            messages: [\n                systemMessage,\n                ...messages\n            ],\n            temperature: 0.7,\n            max_tokens: 1000,\n            top_p: 0.95,\n            frequency_penalty: 0,\n            presence_penalty: 0\n        }, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"api-key\": process.env.AZURE_OPENAI_API_KEY\n            }\n        });\n        res.status(200).json({\n            message: response.data.choices[0].message.content,\n            role: \"assistant\"\n        });\n    } catch (error) {\n        console.error(\"Error processing query:\", error);\n        res.status(200).json({\n            message: \"I encountered an error fetching the data. Please try again in a moment.\",\n            role: \"assistant\",\n            error: true\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/query.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquery&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquery.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();